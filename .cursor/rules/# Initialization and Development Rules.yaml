# Initialization and Development Rules
# Core rules for project initialization, development tracking, and memory management

<rule>
name: initialization_and_development
description: Standards for project initialization, development tracking, and memory management
filters:
  - type: event
    pattern: "session_start|development_update"
  - type: content
    pattern: "(Development Status|CURSOR_CONTEXT|DEVELOPMENT_LOG)"
actions:
  - type: suggest
    message: |
    # 1. Session Initialization
      [Utilize mcp-server always, "command": "sequentialthinking" ]
      *Every session start regardless of trigger phrase will follow these rules*

      ## 1.1 Read in order:
        .cursor/rules/
          ├── @cursor-rules-location.mdc
          ├── @log-checking.mdc
          ├── @memory-management.mdc
          ├── @project-initialization.mdc
          ├── @meta-rules-management.mdc
          ├── @rules-extraction.mdc
          ├── @rules-acknowledgement.mdc
          ├── @general-project-rules.mdc
          ├── @plan-updates.mdc
          ├── @problem-solving.mdc
          ├── @git-commit.mdc
          ├── @documentation-reference.mdc
          └── ...other project specific rules

      ## 1.2 Check for existing project files
      - Check for existing project files in the project directory
      - If no project files are found, go to ### 1.2.1
      - If project files are found, go to ### 1.2.3

        ### 1.2.1 Initialize @PRD.md
          - Create a new @PRD.md file in the project directory
          - Discuss project goals, scope, and requirements with the user
          - Add the necessary information to the @PRD.md file
          - Go to ### 1.2b

        ### 1.2.2  Initialize project files
          - Create new project files in the project directory:
          root/
          ├── @PRD.md
          ├── /docs/working_context/
          │         ├── @DEVELOPMENT_LOG.md
          │         ├── @CURSOR_CONTEXT.md
          │         ├── tasks/
          │         │   ├── open/
          │         │   │   └── {task-id}/
          │         │   │       ├── plan.md
          │         │   │       └── updates.md
          │         │   ├── done/
          │         └── ...
          ├── Project-{project-name}/
          │    ├── src/
          │    ├── CORE/.../State/Development_Status.md
          │    ├── Research/.../State/Development_Status.md
          │    ├── Documentation/
          │    ├── .cursorignore
          │    ├── .gitignore
          │    └── ... create new folders and files as needed based on the @PRD.md
          └── ...
            
      ## 1.3 Load project files
        - Load the project files
        - Go to ### 1.4


      ## 1.4 Context Validation
        On session start (trigger phrases: "hello", "hi", "start", "begin", "where did we left off"):
        ### Required file review:

        ### 1.4.1 Check @PRD.md and working context files:
          root/
              ├── @PRD.md
              ├── working_context/
              │    ├── @DEVELOPMENT_LOG.md
              │    ├── @CURSOR_CONTEXT.md
              │    └── ...
              └── ...
        ### 1.4.2 Check state files:
          - Project/
            ├── CORE/.../State/Development_Status.md
            ├── Research/.../State/Development_Status.md
            ├── Documentation/
            └── ...

        If any of the files are missing, go to ### 1.2.1
        Request clarification if context is unclear
        If all files are present, go to ### 1.5

      ## 1.5 Memory Review:
        - Review the knowledge graph memory files:
          "commands":
            "read_graph",
            "search_nodes",
            "open_nodes",
           
   
    # 2 Development Tracking

      ## 2.1 Memory Management

      1. Working Memory (/docs/working-memory/):
         /docs/working-memory/
         ├── open/                 # Active tasks
         │   └── {task-id}/
         │       ├── plan.md       # Task planning
         │       └── updates.md    # Progress tracking
         └── done/                 # Completed tasks

      2. Project Memory:
         - Location: /docs/
         - Purpose: Long-term project knowledge
         - Updates: Major decisions and milestones

      3. Documentation Memory:
         - Location: /docs/templates/
         - Purpose: Standards and patterns
         - Review: Monthly template updates
 

      ### 2.2 Development Log Updates
      After each significant change or command:
  
      1. Update DEVELOPMENT_LOG.md:
         [YYYY-MM-DD HH:MM] Action Type
         - Current status: [Status]
         - Commands run: [Commands]
         - Errors encountered: [Errors if any]
         - Next steps: [Planned actions]

      2. Update CURSOR_CONTEXT.md:
         ## Current Implementation
         - Guide section: [Section reference]
         - Working: [Functioning features]
         - Issues: [Known problems]
         - Blockers: [Current obstacles]
         - State: [Database/model state]
      ```

      ### 2.3 Progress Markers
      ```
      ✓ Completed work
      🤔 Decisions made
      ❌ Issues encountered
      ⏭️ Next steps
      📚 Documentation updates
      ```

      ## 3. MCP Server Integration

      ### 3.1 Sequential Thinking
      - Always use sequentialthinking for task analysis
      - Break complex operations into discrete steps
      - Validate each step before proceeding

      ### 3.2 Knowledge Graph Memory

      // Memory Operations

      "commands":
      "create_entities",   # Add new knowledge nodes
      "create_relations",  # Link related concepts
      "add_observations",  # Record new insights
      "read_graph",        # Query existing knowledge
      "search_nodes",      # Find relevant information
      "open_nodes",        # Access detailed node data
 

      // Lesson Management

      "commands":
      "create_lesson",     # Create a new lesson from an error and its solution
      "find_similar_errors", # Find similar errors and their solutions
      "update_lesson_success" # Update success tracking for a lesson
      "get_lesson_recommendations", # Get relevant lessons for current context

examples:
  - input: |
      # Session start
      "hello"
    output: |
      1. Context check performed
      2. Required files reviewed
      3. Memory system initialized
      4. Development logs prepared

  - input: |
      # Development update
      "Implementing new feature"
    output: |
      1. DEVELOPMENT_LOG.md updated
      2. CURSOR_CONTEXT.md updated
      3. Progress markers used
      4. Knowledge graph updated

metadata:
  priority: critical
  version: 1.0
  tags:
    - initialization
    - development
    - memory-management
    - mcp-server
</rule>
