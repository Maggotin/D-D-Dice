---
description: Guidelines for efficient log checking in STScript RPG Systems
globs:
---
# Log Checking Rule
# Guidelines for efficient log checking in STScript RPG Systems

<rule>
name: log_checking
description: Rules for checking logs efficiently in STScript RPG development
filters:
  - type: command
    pattern: "grep|log|find"
  - type: content
    pattern: "(log checking|error analysis|debug logs|script debugging)"
actions:
  - type: suggest
    message: |
      # STScript RPG Log Checking Guidelines

      ## 1. Development Logs

      ### 1.1 Development Log Analysis
      ```
      1. Check DEVELOPMENT_LOG.md for recent changes:
         - Review timestamps and actions
         - Focus on most recent entries
         - Look for error indicators (‚ùå)
         - Check status markers (‚úì, ü§î, ‚è≠Ô∏è, üìö)
      ```

      ### 1.2 Context Tracking
      ```
      1. Review CURSOR_CONTEXT.md:
         - Current implementation status
         - Working features
         - Known issues
         - Current blockers
         - State variables
      ```

      ## 2. STScript Debugging

      ### 2.1 JSON Script Analysis
      ```
      1. Check script structure:
         - Verify command syntax
         - Check closure blocks `{: :}`
         - Validate variable references `{{var::name}}`
         - Confirm pipe sequences `|`
      
      2. Common script issues:
         - Missing closure endings `:}`
         - Unmatched quotes in strings
         - Incorrect variable references
         - Improper command syntax
      ```

      ### 2.2 Script Execution Flow
      ```
      1. Track command execution:
         - Follow the pipe sequence
         - Check conditional branches
         - Verify switch/case structures
         - Validate loop constructs
      
      2. Variable state tracking:
         - Monitor `/setvar` operations
         - Check variable references `{{var::name}}`
         - Verify variable persistence across pipes
         - Validate array/object access
      ```

      ## 3. Error Analysis

      ### 3.1 Common STScript Errors
      ```
      1. Syntax errors:
         - Missing pipe separators
         - Unclosed string literals
         - Malformed JSON structures
         - Incorrect command parameters
      
      2. Runtime errors:
         - Undefined variables
         - Invalid command usage
         - Improper parameter types
         - Execution timeouts
      ```

      ### 3.2 Debugging Techniques
      ```
      1. Add debug markers:
         - Insert `/send` commands with debug info
         - Use `/breakpoint` to pause execution
         - Add `/log` statements at key points
         - Include state dumps with `/send {{getvar::all}}`
      
      2. Isolate components:
         - Test individual command blocks
         - Verify closure functionality
         - Check variable persistence
         - Validate conditional logic
      ```

      ## 4. Script Testing

      ### 4.1 Test Scenarios
      ```
      1. Create test cases:
         - Define expected inputs
         - Specify expected outputs
         - Document edge cases
         - Test error handling
      
      2. Test execution:
         - Run scripts with test inputs
         - Verify outputs match expectations
         - Check error handling behavior
         - Validate state changes
      ```

      ### 4.2 Documentation Verification
      ```
      1. Check against reference docs:
         - Verify command usage against STScript-Commands-Reference.md
         - Confirm macro usage with ST Macros.md
         - Validate against STScript-guide.md examples
         - Check output structure against gatherStsOutput.json
      ```

      ## 5. Best Practices

      ### 5.1 Log Analysis Guidelines
      ```
      1. Focus on recent changes first
      2. Use specific search patterns for STScript syntax
      3. Check both DEVELOPMENT_LOG.md and CURSOR_CONTEXT.md
      4. Use progress markers (‚úì, ü§î, ‚ùå, ‚è≠Ô∏è, üìö) for quick filtering
      5. Look for patterns in errors
      6. Track command sequences leading to errors
      7. Document findings in DEVELOPMENT_LOG.md
      ```

      ### 5.2 Common Search Patterns
      ```
      1. Command verification:
         grep -i "/[a-z]+" dev/*.json
      
      2. Variable usage:
         grep -i "{{var::" dev/*.json
      
      3. Closure blocks:
         grep -i "{:" dev/*.json
      
      4. Error patterns:
         grep -i "error\|failed\|undefined\|invalid" log/*.md
      ```

examples:
  - input: |
      How do I debug a variable issue in my STScript?
    output: |
      To debug variable issues in STScript:
      
      1. Add debug markers:
         ```
         /setvar key=testVar value="test value" |
         /send "Debug: testVar = {{var::testVar}}" |
         ```
      
      2. Check variable persistence:
         ```
         /setvar key=debugState value={{getvar::all}} |
         /send "Current state: {{var::debugState}}" |
         ```
      
      3. Verify variable references in your script:
         - Ensure correct syntax: `{{var::name}}` not `{{name}}`
         - Check for typos in variable names
         - Verify variables are set before being referenced
         - Confirm variables persist across pipe boundaries

  - input: |
      How do I find syntax errors in my STScript?
    output: |
      To find syntax errors in STScript:
      
      1. Check for common issues:
         - Missing pipe separators `|` at end of commands
         - Unclosed string literals (missing quotes)
         - Unclosed closure blocks (missing `:}`)
         - Malformed JSON structures
      
      2. Use grep to find potential issues:
         ```
         grep -i "{:" dev/YourScript.json | wc -l
         grep -i ":}" dev/YourScript.json | wc -l
         ```
         Compare counts to ensure they match
      
      3. Validate against documentation:
         - Check command syntax in STScript-Commands-Reference.md
         - Verify macro usage in ST Macros.md
         - Compare with examples in STScript-guide.md

  - input: |
      How do I check recent development progress?
    output: |
      To check recent development progress:
      
      1. Review log/DEVELOPMENT_LOG.md for timestamps and actions:
         ```
         grep -i "^## " log/DEVELOPMENT_LOG.md
         ```
      
      2. Use grep to filter by progress markers:
         ```
         grep -i "‚úì" log/DEVELOPMENT_LOG.md  # Completed items
         grep -i "‚è≠Ô∏è" log/DEVELOPMENT_LOG.md  # Next steps
         ```
      
      3. Check current implementation status:
         ```
         grep -i "## Current" -A 10 log/CURSOR_CONTEXT.md
         ```

metadata:
  priority: high
  version: 1.0
  tags:
    - stscript
    - debugging
    - rpg-scripts
    - sillytavern
    - development
</rule>
</rewritten_file>