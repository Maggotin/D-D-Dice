---
description: Standards for project initialization, development tracking, and memory management
globs: ["**/log/**/*.md", "**/.cursor/rules/**/*.mdc", "**/rules/**/*.mdc"]
alwaysApply: false
---
# Initialization and Development Rules
# Core rules for project initialization, development tracking, and memory management

<rule>
name: initialization_and_development
description: Standards for project initialization, development tracking, and memory management
filters:
  - type: event
    pattern: "session_start|development_update"
  - type: content
    pattern: "(Development Status|CURSOR_CONTEXT|DEVELOPMENT_LOG)"
actions:
  - type: suggest
    message: |
      # D&D Dice Extension Initialization and Development

      ## 1. Session Initialization

      ### 1.1 Context Validation
      On session start (trigger phrases: "hello", "hi", "start", "begin", "where did we left off"):
      ```
      1. Check working context:
         - RPG System Development
         - Specific Script:
           - AutoRPG in dev/AutoRPG-qr-dev.json
           - D&D System in dev/D&D-System-dev.json
           - Other Scripts in 'dev/' (see below for folder content)
         - General Questions

      2. Request clarification if context is unclear

      3. If context is System or Script:
         - Review relevant state files:
           - System: log/DEVELOPMENT_LOG.md
           - Script: log/CURSOR_CONTEXT.md
      ```

      ### 1.2 Required File Review
      ```
      1. Review key files:
         - @general.mdc
         - @st-script-cursorrules-prompt.mdc
         - @general.cursorrules
         - @stscript-syntax.cursorrules
         - @st-script-cursorrules-prompt.cursorrules
      2. Read CURSOR_CONTEXT.md and run command: "read_graph"
         3. Acknowledge current state
      4. Reference relevant guide sections
      5. Continue from last documented point
      ```

      ## 2. Development Tracking

      ### 2.1 Memory Management
      ```
      1. Working Memory (log/):
         log/
         ‚îú‚îÄ‚îÄ CURSOR_CONTEXT.md    # Current state
         ‚îî‚îÄ‚îÄ DEVELOPMENT_LOG.md   # Progress tracking

      2. Project Memory:
         - Location: dev/
         - Purpose: Development versions of scripts
         - Updates: Script modifications and tests

      3. Documentation Memory:
         - Location: reference/
         - Purpose: STScript standards and commands
         - Review: Command updates and macro changes
      ```

      ### 2.2 Development Log Updates
      After each significant change or script modification:
      ```
      1. Update DEVELOPMENT_LOG.md:
         [YYYY-MM-DD HH:MM] Action Type
         - Current status: [Status]
         - Commands tested: [Commands]
         - Errors encountered: [Errors]
         - Next steps: [Planned modifications]

      2. Update CURSOR_CONTEXT.md:
         ## Current Implementation
         - Guide section: [Section reference]
         - Working: [Functioning features/commands]
         - Issues: [Known problems]
         - Blockers: [Current obstacles]
         - State: [State/variables]
      ```

      ### 2.3 Progress Markers
      ```
      ‚úì Completed work
      ü§î Decisions made
      ‚ùå Issues encountered
      ‚è≠Ô∏è Next steps
      üìö Documentation updates
      ```

     ## 3. MCP Server Integration

      ### 3.1 Sequential Thinking
      - Always use sequentialthinking for task analysis
      - Break complex operations into discrete steps
      - Validate each step before proceeding

      ### 3.2 Knowledge Graph Memory
      ```javascript
      // Entity Management
      create_entities({
        type: "component",
        label: "feature_name",
        properties: {
          status: "active",
          dependencies: []
        }
      });

      // Relationship Tracking
      create_relations({
        type: "depends_on",
        source: component_id,
        target: dependency_id
      });

      // Memory Operations
      - create_entities: Add new knowledge nodes
      - create_relations: Link related concepts
      - add_observations: Record new insights
      - read_graph: Query existing knowledge
      - search_nodes: Find relevant information
      - open_nodes: Access detailed node data
      ```

examples:
  - input: |
      # Session start
      "hello"
    output: |
      I'll help you with the D&D Dice Extension development. Let me get oriented with the current state:

      1. I've reviewed the key project files including:
         - CURSOR_CONTEXT.md for current implementation status
         - DEVELOPMENT_LOG.md for progress history
         - Core extension files (index.js, manifest.json)
         - Documentation in the rules directory

      2. Current project status:
         - Basic extension structure is in place
         - Core functionality is implemented in index.js
         - Function calling API integration is working
         - Documentation for dice notation is structured
         - Memory management system is established

      3. Recent updates include:
         - Restructured documentation files to follow consistent format
         - Enhanced dice notation documentation
         - Improved memory management guidelines
         - Updated rule extraction documentation

      4. What would you like to work on next? We could:
         - Continue reviewing and updating documentation
         - Enhance the dice rolling functionality
         - Improve UI components
         - Add new dice types or features
         - Work on mobile responsiveness

  - input: |
      # Development update
      "Implementing new feature"
    output: |
      I'll help you implement a new feature for the D&D Dice Extension. Let's approach this systematically:

      1. First, I'll update our development tracking:
         - Added entry to DEVELOPMENT_LOG.md with current timestamp
         - Updated CURSOR_CONTEXT.md to reflect the new feature being implemented
         - Used progress markers to track our status

      2. For this feature implementation, I recommend:
         - Starting with a clear specification of requirements
         - Breaking down the implementation into discrete steps
         - Testing each component individually
         - Integrating with existing functionality
         - Documenting the new feature

      3. Let's begin by defining exactly what this feature should do, then we can:
         - Identify the appropriate location in the codebase
         - Create any necessary new functions or components
         - Implement the core functionality
         - Add appropriate error handling
         - Test with various inputs

      What specific feature would you like to implement? This will help me provide more targeted guidance.

metadata:
  priority: critical
  version: 1.0
  tags:
    - initialization
    - development
    - memory-management
    - mcp-server 