---
description: SillyTavern extension API syntax reference with focus on getContext()
globs: 
alwaysApply: false
---

# SillyTavern Extension API Syntax

This document outlines the syntax and usage of the SillyTavern extension API, with a focus on the `getContext()` function.

## Extension Structure

### Basic Extension Files

```
/
├── index.js           # Main extension entry point
├── style.css          # Styling for the extension
├── manifest.json      # Extension configuration
└── README.md          # Documentation
```

### manifest.json

```json
{
    "display_name": "Extension Name",
    "loading_order": 5,
    "requires": [],
    "optional": [],
    "js": "index.js",
    "css": "style.css",
    "author": "Author Name",
    "version": "1.0.0",
    "homePage": "https://github.com/username/repository",
    "auto_update": true
}
```

## getContext() API

The `getContext()` function is imported from `extensions.js` and provides access to the SillyTavern context:

```javascript
import { getContext } from '../../../extensions.js';

const context = getContext();
```

### Available Properties and Methods

#### Chat Context

```javascript
// Access character names
context.name1       // User name
context.name2       // Character name

// Current chat
context.chat        // Current chat array
context.chatId      // Current chat ID

// Characters
context.characters  // List of all characters
context.characterId // Current character ID

// Messages
context.getMessage(messageId)  // Get message by ID
context.getMessageTimeStamp()  // Get current timestamp format
```

#### System Messages

```javascript
// Send system message
context.sendSystemMessage(type, text, options);

// Message types
'generic'    // Generic system message
'error'      // Error message
'warning'    // Warning message
'info'       // Information message

// Options
{
    isSmallSys: true,    // Small system message
    forceAvatar: true,   // Force avatar display
    avoidDuplicates: true // Avoid duplicate messages
}
```

#### User Interface

```javascript
// Toasts
toastr.success('Success message');
toastr.info('Info message');
toastr.warning('Warning message');
toastr.error('Error message');

// Popups
import { POPUP_TYPE, callGenericPopup } from '../../../popup.js';

// Popup types
POPUP_TYPE.ALERT
POPUP_TYPE.CONFIRM
POPUP_TYPE.INPUT
POPUP_TYPE.MULTI_INPUT

// Example popup
callGenericPopup('Message', POPUP_TYPE.INPUT, '', { 
    okButton: 'OK', 
    cancelButton: 'Cancel' 
});
```

#### Slash Commands

```javascript
import { SlashCommand } from '../../../slash-commands/SlashCommand.js';
import { ARGUMENT_TYPE, SlashCommandArgument, SlashCommandNamedArgument } from '../../../slash-commands/SlashCommandArgument.js';
import { commonEnumProviders } from '../../../slash-commands/SlashCommandCommonEnumsProvider.js';
import { SlashCommandParser } from '../../../slash-commands/SlashCommandParser.js';

// Register a slash command
SlashCommandParser.addCommandObject(SlashCommand.fromProps({
    name: 'command',
    aliases: ['cmd'],
    callback: (args, value) => {
        // Command logic
        return result;
    },
    helpString: 'Command description',
    returns: 'return value description',
    namedArgumentList: [
        SlashCommandNamedArgument.fromProps({
            name: 'option',
            description: 'Option description',
            isRequired: false,
            typeList: [ARGUMENT_TYPE.BOOLEAN],
            defaultValue: String(false),
            enumProvider: commonEnumProviders.boolean('trueFalse'),
        }),
    ],
    unnamedArgumentList: [
        SlashCommandArgument.fromProps({
            description: 'Argument description',
            isRequired: true,
            typeList: [ARGUMENT_TYPE.STRING],
        }),
    ],
}));
```

#### Function Calling API

```javascript
// Register a function tool for AI models
const { registerFunctionTool } = getContext();

// Function schema
const functionSchema = Object.freeze({
    $schema: 'http://json-schema.org/draft-04/schema#',
    type: 'object',
    properties: {
        param1: {
            type: 'string',
            description: 'Parameter description',
        },
        param2: {
            type: 'number',
            description: 'Parameter description',
        },
    },
    required: [
        'param1',
    ],
});

// Register the function
registerFunctionTool({
    name: 'FunctionName',
    displayName: 'Display Name',
    description: 'Function description',
    parameters: functionSchema,
    action: async (args) => {
        // Function logic
        return result;
    },
    formatMessage: () => '',
});
```

#### Event Handling

```javascript
// DOM ready event
jQuery(function () {
    // Initialize extension
});

// Document events
$(document).on('click touchend', function (e) {
    // Handle click/touch events
});

// Custom events
document.addEventListener('characterSelected', function (event) {
    // Handle character selection
});
```

#### Animation

```javascript
import { animation_duration } from '../../../../script.js';

// Fade in/out with animation duration
element.fadeIn(animation_duration);
element.fadeOut(animation_duration);
```

## Common Patterns

### Adding UI Elements

```javascript
// Add button to extensions menu
const buttonHtml = `
<div id="extension_button" class="list-group-item flex-container flexGap5">
    <div class="fa-solid fa-icon extensionsMenuExtensionButton" title="Button Title" /></div>
    Button Text
</div>`;

$('#extensionsMenu').append(buttonHtml);

// Add dropdown
const dropdownHtml = `
<div id="extension_dropdown">
    <ul class="list-group">
        <li class="list-group-item" data-value="option1">Option 1</li>
        <li class="list-group-item" data-value="option2">Option 2</li>
    </ul>
</div>`;

$(document.body).append(dropdownHtml);
$('#extension_dropdown').hide();

// Position dropdown with Popper.js
let popper = Popper.createPopper(
    $('#extension_button').get(0), 
    $('#extension_dropdown').get(0), 
    { placement: 'top' }
);
```

### Handling User Input

```javascript
// Get user input via popup
const userInput = await callGenericPopup(
    'Enter input:', 
    POPUP_TYPE.INPUT, 
    '', 
    { okButton: 'Submit', cancelButton: 'Cancel' }
);

if (userInput) {
    // Process user input
}
```

### Sending Messages

```javascript
// Send system message
context.sendSystemMessage(
    'generic', 
    `Message text`, 
    { isSmallSys: true }
);

// Add message to chat
context.addOneMessage({
    name: context.name1,
    is_user: true,
    is_system: false,
    send_date: context.getMessageTimeStamp(),
    mes: messageText
});
```

## Error Handling

```javascript
// Try-catch for error handling
try {
    // Code that might throw an error
} catch (error) {
    console.error('Extension: Error description', error);
    toastr.error('User-friendly error message');
}

// Function availability check
const { featureFunction } = getContext();
if (!featureFunction) {
    console.debug('Extension: feature is not supported');
    return;
}
```

## Best Practices

1. Always check if API functions exist before using them
2. Use try-catch blocks for error handling
3. Provide user-friendly error messages
4. Clean up event listeners and UI elements when not needed
5. Follow SillyTavern's UI design patterns
6. Use animation_duration for consistent animations
7. Provide clear documentation in your README.md
8. Version your extension properly in manifest.json 