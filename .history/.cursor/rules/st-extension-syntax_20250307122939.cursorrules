---
description: SillyTavern extension API syntax reference with focus on getContext()
globs: ["**/*.js", "**/extensions/**/*"]
alwaysApply: false
---
# SillyTavern Extension API Syntax
# Comprehensive reference for SillyTavern extension API syntax and usage

<rule>
name: st_extension_syntax
description: Comprehensive reference for SillyTavern extension API syntax with focus on getContext()
filters:
  - type: content
    pattern: "(?i)(sillyTavern|extension|getContext|API|function call)"
  - type: event
    pattern: "code_change|user_query"
actions:
  - type: suggest
    message: |
      # SillyTavern Extension API Syntax Reference

      ## 1. Extension Structure

      ### Basic Extension Files

      ```
      /
      ├── index.js           # Main extension entry point
      ├── style.css          # Styling for the extension
      ├── manifest.json      # Extension configuration
      └── README.md          # Documentation
      ```

      ### manifest.json

      ```json
      {
          "display_name": "Extension Name",
          "loading_order": 5,
          "requires": [],
          "optional": [],
          "js": "index.js",
          "css": "style.css",
          "author": "Author Name",
          "version": "1.0.0",
          "homePage": "https://github.com/username/repository",
          "auto_update": true
      }
      ```

      ## 2. getContext() API

      The `getContext()` function is imported from `extensions.js` and provides access to the SillyTavern context:

      ```javascript
      import { getContext } from '../../../extensions.js';

      const context = getContext();
      ```

      ### Available Properties and Methods

      #### Chat Context

      ```javascript
      // Access character names
      context.name1       // User name
      context.name2       // Character name

      // Current chat
      context.chat        // Current chat array
      context.chatId      // Current chat ID

      // Characters
      context.characters  // List of all characters
      context.characterId // Current character ID

      // Messages
      context.getMessage(messageId)  // Get message by ID
      context.getMessageTimeStamp()  // Get current timestamp format
      ```

      #### System Messages

      ```javascript
      // Send system message
      context.sendSystemMessage(type, text, options);

      // Message types
      'generic'    // Generic system message
      'error'      // Error message
      'warning'    // Warning message
      'info'       // Information message

      // Options
      {
          isSmallSys: true,    // Small system message
          forceAvatar: true,   // Force avatar display
          avoidDuplicates: true // Avoid duplicate messages
      }
      ```

      ## 3. User Interface Integration

      ### Notifications and Popups

      ```javascript
      // Toasts
      toastr.success('Success message');
      toastr.info('Info message');
      toastr.warning('Warning message');
      toastr.error('Error message');

      // Popups
      import { POPUP_TYPE, callGenericPopup } from '../../../popup.js';

      // Popup types
      POPUP_TYPE.ALERT
      POPUP_TYPE.CONFIRM
      POPUP_TYPE.INPUT
      POPUP_TYPE.MULTI_INPUT

      // Example popup
      callGenericPopup('Message', POPUP_TYPE.INPUT, '', { 
          okButton: 'OK', 
          cancelButton: 'Cancel' 
      });
      ```

      ### UI Elements

      ```javascript
      // Add button to extensions menu
      const buttonHtml = `
      <div id="extension_button" class="list-group-item flex-container flexGap5">
          <div class="fa-solid fa-icon extensionsMenuExtensionButton" title="Button Title" /></div>
          Button Text
      </div>`;

      $('#extensionsMenu').append(buttonHtml);

      // Add dropdown
      const dropdownHtml = `
      <div id="extension_dropdown">
          <ul class="list-group">
              <li class="list-group-item" data-value="option1">Option 1</li>
              <li class="list-group-item" data-value="option2">Option 2</li>
          </ul>
      </div>`;

      $(document.body).append(dropdownHtml);
      $('#extension_dropdown').hide();

      // Position dropdown with Popper.js
      let popper = Popper.createPopper(
          $('#extension_button').get(0), 
          $('#extension_dropdown').get(0), 
          { placement: 'top' }
      );
      ```

      ## 4. Advanced Integration

      ### Slash Commands

      ```javascript
      import { SlashCommand } from '../../../slash-commands/SlashCommand.js';
      import { ARGUMENT_TYPE, SlashCommandArgument, SlashCommandNamedArgument } from '../../../slash-commands/SlashCommandArgument.js';
      import { commonEnumProviders } from '../../../slash-commands/SlashCommandCommonEnumsProvider.js';
      import { SlashCommandParser } from '../../../slash-commands/SlashCommandParser.js';

      // Register a slash command
      SlashCommandParser.addCommandObject(SlashCommand.fromProps({
          name: 'command',
          aliases: ['cmd'],
          callback: (args, value) => {
              // Command logic
              return result;
          },
          helpString: 'Command description',
          returns: 'return value description',
          namedArgumentList: [
              SlashCommandNamedArgument.fromProps({
                  name: 'option',
                  description: 'Option description',
                  isRequired: false,
                  typeList: [ARGUMENT_TYPE.BOOLEAN],
                  defaultValue: String(false),
                  enumProvider: commonEnumProviders.boolean('trueFalse'),
              }),
          ],
          unnamedArgumentList: [
              SlashCommandArgument.fromProps({
                  description: 'Argument description',
                  isRequired: true,
                  typeList: [ARGUMENT_TYPE.STRING],
              }),
          ],
      }));
      ```

      ### Function Calling API

      ```javascript
      // Register a function tool for AI models
      const { registerFunctionTool } = getContext();

      // Function schema
      const functionSchema = Object.freeze({
          $schema: 'http://json-schema.org/draft-04/schema#',
          type: 'object',
          properties: {
              param1: {
                  type: 'string',
                  description: 'Parameter description',
              },
              param2: {
                  type: 'number',
                  description: 'Parameter description',
              },
          },
          required: [
              'param1',
          ],
      });

      // Register the function
      registerFunctionTool({
          name: 'FunctionName',
          displayName: 'Display Name',
          description: 'Function description',
          parameters: functionSchema,
          action: async (args) => {
              // Function logic
              return result;
          },
          formatMessage: () => '',
      });
      ```

      ## 5. Event Handling

      ### DOM and Custom Events

      ```javascript
      // DOM ready event
      jQuery(function () {
          // Initialize extension
      });

      // Document events
      $(document).on('click touchend', function (e) {
          // Handle click/touch events
      });

      // Custom events
      document.addEventListener('characterSelected', function (event) {
          // Handle character selection
      });
      ```

      ### Animation

      ```javascript
      import { animation_duration } from '../../../../script.js';

      // Fade in/out with animation duration
      element.fadeIn(animation_duration);
      element.fadeOut(animation_duration);
      ```

      ## 6. Common Implementation Patterns

      ### Handling User Input

      ```javascript
      // Get user input via popup
      const userInput = await callGenericPopup(
          'Enter input:', 
          POPUP_TYPE.INPUT, 
          '', 
          { okButton: 'Submit', cancelButton: 'Cancel' }
      );

      if (userInput) {
          // Process user input
      }
      ```

      ### Sending Messages

      ```javascript
      // Send system message
      context.sendSystemMessage(
          'generic', 
          `Message text`, 
          { isSmallSys: true }
      );

      // Add message to chat
      context.addOneMessage({
          name: context.name1,
          is_user: true,
          is_system: false,
          send_date: context.getMessageTimeStamp(),
          mes: messageText
      });
      ```

      ## 7. Error Handling and Best Practices

      ### Error Handling

      ```javascript
      // Try-catch for error handling
      try {
          // Code that might throw an error
      } catch (error) {
          console.error('Extension: Error description', error);
          toastr.error('User-friendly error message');
      }

      // Function availability check
      const { featureFunction } = getContext();
      if (!featureFunction) {
          console.debug('Extension: feature is not supported');
          return;
      }
      ```

      ### Best Practices

      1. Always check if API functions exist before using them
      2. Use try-catch blocks for error handling
      3. Provide user-friendly error messages
      4. Clean up event listeners and UI elements when not needed
      5. Follow SillyTavern's UI design patterns
      6. Use animation_duration for consistent animations
      7. Provide clear documentation in your README.md
      8. Version your extension properly in manifest.json

      ## 8. Extension Lifecycle

      ### Initialization

      ```javascript
      // Initialize extension when document is ready
      jQuery(function () {
          // Check if required features are available
          const context = getContext();
          if (!context) {
              console.error('Extension: getContext is not available');
              return;
          }
          
          // Initialize UI elements
          addUIElements();
          
          // Register event handlers
          registerEventHandlers();
          
          // Register function tools if available
          if (context.registerFunctionTool) {
              registerFunctionTools();
          }
          
          console.debug('Extension: Initialized successfully');
      });
      ```

      ### Cleanup

      ```javascript
      // Clean up when extension is disabled or unloaded
      function cleanup() {
          // Remove UI elements
          $('#extension_button').remove();
          $('#extension_dropdown').remove();
          
          // Remove event listeners
          $(document).off('click.extension');
          document.removeEventListener('characterSelected', handleCharacterSelection);
          
          console.debug('Extension: Cleanup completed');
      }
      ```

examples:
  - input: |
      "How do I access the current character's name in my SillyTavern extension?"
    output: |
      To access the current character's name in your SillyTavern extension, you need to use the `getContext()` function which provides access to the SillyTavern context:

      1. First, import and call getContext():

      ```javascript
      import { getContext } from '../../../extensions.js';
      
      // Get the context
      const context = getContext();
      ```

      2. Access the character name using context.name2:

      ```javascript
      // Get the current character's name
      const characterName = context.name2;
      
      console.debug(`Current character: ${characterName}`);
      ```

      3. For more character information, you can use:

      ```javascript
      // Get the current character ID
      const characterId = context.characterId;
      
      // Get the full character data from the characters list
      const characterData = context.characters.find(char => char.avatar === characterId);
      
      // Access additional character properties if needed
      if (characterData) {
          console.debug(`Character description: ${characterData.description}`);
      }
      ```

      This approach ensures you always have access to the current character's name, even if the user switches characters during the session.

  - input: |
      "How do I register a function tool for AI models in my SillyTavern extension?"
    output: |
      To register a function tool for AI models in your SillyTavern extension:

      1. First, get the registerFunctionTool method from the context:

      ```javascript
      import { getContext } from '../../../extensions.js';
      
      // Get the context
      const context = getContext();
      const { registerFunctionTool } = context;
      
      // Check if function calling is supported
      if (!registerFunctionTool) {
          console.debug('Function calling API is not supported in this SillyTavern version');
          return;
      }
      ```

      2. Define your function schema:

      ```javascript
      // Define the function parameters schema
      const functionSchema = {
          type: 'object',
          properties: {
              text: {
                  type: 'string',
                  description: 'The text to process',
              },
              option: {
                  type: 'boolean',
                  description: 'Optional flag to enable special processing',
              }
          },
          required: ['text']
      };
      ```

      3. Register your function tool:

      ```javascript
      registerFunctionTool({
          name: 'processText',
          displayName: 'Process Text',
          description: 'Processes the provided text according to specified options',
          parameters: functionSchema,
          action: async (args) => {
              try {
                  const { text, option = false } = args;
                  
                  // Your function logic here
                  const result = option ? 
                      text.toUpperCase() : 
                      text.toLowerCase();
                  
                  // Return the result
                  return {
                      success: true,
                      result: result,
                      message: `Text processed successfully: ${result}`
                  };
              } catch (error) {
                  console.error('Error processing text:', error);
                  return {
                      success: false,
                      error: error.message
                  };
              }
          },
          // Optional: Format the result as a message
          formatMessage: (result) => {
              if (!result.success) {
                  return `Error: ${result.error}`;
              }
              return `Processed result: ${result.result}`;
          }
      });
      ```

      4. Call the registration during initialization:

      ```javascript
      // Initialize when document is ready
      jQuery(function() {
          // Other initialization code
          
          // Register function tools
          registerFunctionTools();
          
          console.debug('Function tools registered successfully');
      });
      
      function registerFunctionTools() {
          // Your registration code from steps 1-3
      }
      ```

      This implementation makes your extension's functionality available to AI models that support function calling, allowing them to process text according to your extension's capabilities.

  - input: |
      "How do I add a button to the SillyTavern UI in my extension?"
    output: |
      To add a button to the SillyTavern UI in your extension:

      1. First, create the HTML for your button:

      ```javascript
      function addExtensionButton() {
          // Create button HTML with proper SillyTavern classes
          const buttonHtml = `
          <div id="my_extension_button" class="list-group-item flex-container flexGap5">
              <div class="fa-solid fa-magic extensionsMenuExtensionButton" title="My Extension"></div>
              My Extension
          </div>`;
          
          // Add the button to the extensions menu
          $('#extensionsMenu').append(buttonHtml);
      }
      ```

      2. Add event listener to handle button clicks:

      ```javascript
      function setupButtonListeners() {
          // Add click event listener
          $(document).on('click', '#my_extension_button', function() {
              // Handle button click
              showExtensionUI();
          });
      }
      ```

      3. Create a function to show your extension's UI:

      ```javascript
      function showExtensionUI() {
          // Create UI container if it doesn't exist
          if ($('#my_extension_container').length === 0) {
              const containerHtml = `
              <div id="my_extension_container" class="my-extension-panel">
                  <div class="my-extension-header">
                      <h3>My Extension</h3>
                      <div id="my_extension_close" class="fa-solid fa-times"></div>
                  </div>
                  <div class="my-extension-content">
                      <!-- Your extension UI elements here -->
                      <button id="my_extension_action" class="btn btn-primary">Perform Action</button>
                  </div>
              </div>`;
              
              $('body').append(containerHtml);
              
              // Add close button listener
              $(document).on('click', '#my_extension_close', function() {
                  $('#my_extension_container').hide();
              });
              
              // Add action button listener
              $(document).on('click', '#my_extension_action', function() {
                  performExtensionAction();
              });
          }
          
          // Show the UI
          $('#my_extension_container').show();
      }
      ```

      4. Add CSS for your extension UI:

      ```css
      /* In your style.css file */
      .my-extension-panel {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background-color: var(--SmartThemeBlurTintColor);
          border: 1px solid var(--SmartThemeBorderColor);
          border-radius: var(--avatar-roundness);
          padding: 20px;
          z-index: 1000;
          display: none;
      }
      
      .my-extension-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 15px;
      }
      
      .my-extension-header h3 {
          margin: 0;
          color: var(--SmartThemeBodyColor);
      }
      
      .my-extension-content {
          color: var(--SmartThemeBodyColor);
      }
      ```

      5. Initialize everything when the document is ready:

      ```javascript
      // Initialize when document is ready
      jQuery(function() {
          // Add button to UI
          addExtensionButton();
          
          // Setup event listeners
          setupButtonListeners();
          
          console.debug('Extension UI initialized');
      });
      ```

      This implementation follows SillyTavern's UI patterns and ensures your extension button integrates seamlessly with the existing interface. The button will appear in the extensions menu and open your custom UI panel when clicked.

metadata:
  priority: high
  version: 1.0
  tags:
    - sillyTavern-extension
    - api-reference
    - getContext
    - function-calling
    - javascript
</rule>