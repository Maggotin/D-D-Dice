---
description: Memory management system for the D&D Dice Extension
globs: ["**/log/**/*.md", "**/.cursor/rules/**/*.mdc", "**/rules/**/*.mdc"]
---
# Memory Management System
# Comprehensive rules for managing working memory, project memory, and documentation memory

<rule>
name: memory_management_system
description: Rules and standards for the D&D Dice Extension memory management system
filters:
  - type: content
    pattern: "(?i)(memory|documentation|log|context|development|progress)"
  - type: file_extension
    pattern: "\\.(md|mdc)$"
actions:
  - type: suggest
    message: |
      # D&D Dice Extension Memory Management System

      ## 1. Memory Types

      ### 1.1 Working Memory
      - **Location**: `/log/`
      - **Purpose**: Track current state and development progress
      - **Updates**: Real-time during development
      - **Structure**:
        ```
        /log/
        ‚îú‚îÄ‚îÄ CURSOR_CONTEXT.md    # Current state and status
        ‚îî‚îÄ‚îÄ DEVELOPMENT_LOG.md   # Progress tracking and history
        ```

      ### 1.2 Project Memory
      - **Location**: Project root
      - **Purpose**: Core code and documentation
      - **Updates**: When implementing features or fixing issues
      - **Components**:
        ```
        /
        ‚îú‚îÄ‚îÄ index.js             # Main extension code
        ‚îú‚îÄ‚îÄ style.css            # Styling
        ‚îú‚îÄ‚îÄ manifest.json        # Extension configuration
        ‚îú‚îÄ‚îÄ README.md            # User documentation
        ‚îî‚îÄ‚îÄ Reference/           # Reference materials
        ```

      ### 1.3 Documentation Memory
      - **Location**: `/.cursor/rules/` and `/rules/`
      - **Purpose**: Development guidelines and standards
      - **Updates**: When standards change or documentation is enhanced
      - **Structure**:
        ```
        /.cursor/rules/
        ‚îú‚îÄ‚îÄ dice-syntax.mdc      # Dice notation reference
        ‚îî‚îÄ‚îÄ st-extension-cursorrules-guidelines.mdc  # Extension guidelines
        
        /rules/
        ‚îú‚îÄ‚îÄ memory-management.mdc  # This file
        ‚îî‚îÄ‚îÄ other-rules.mdc        # Other development standards
        ```

      ## 2. Working Memory Files

      ### 2.1 CURSOR_CONTEXT.md Requirements
      - **Project Overview**: Basic project information
      - **Current Status**: What's working, being implemented, broken, and blocked
      - **Implementation Progress**: Completed, in-progress, and pending tasks
      - **Reference Materials**: Important documentation and resources
      - **Recent Updates**: Latest changes to the project

      ### 2.2 DEVELOPMENT_LOG.md Structure
      - **Chronological Entries**: Newest at the bottom
      - **Entry Format**:
        ```markdown
        ## YYYY-MM-DD HH:MM

        ### Current Status
        - Bullet points describing current state
        - Changes made since last entry
        - New features or fixes implemented

        ### Commands Run
        - List of significant commands executed
        - Code changes made

        ### Errors Encountered
        - Any issues or errors found
        - How they were addressed

        ### Next Steps Planned
        1. Numbered list of upcoming tasks
        2. Features to implement
        3. Bugs to fix
        4. Documentation to update
        ```

      ## 3. Status Update Process

      ### 3.1 Adding Development Log Entries
      1. Open DEVELOPMENT_LOG.md
      2. Add new section with current timestamp
      3. Document current status, commands, errors, and next steps
      4. Use the established format for consistency

      ### 3.2 Updating Cursor Context
      1. Open CURSOR_CONTEXT.md
      2. Update relevant sections based on recent changes
      3. Ensure "What's Working" and "What's Being Implemented" are current
      4. Add to "Recent Updates" section

      ### 3.3 Progress Markers
      - ‚úì Completed work
      - ü§î Decisions made
      - ‚ùå Issues encountered
      - ‚è≠Ô∏è Next steps
      - üìö Documentation updates

      ## 4. Documentation Management

      ### 4.1 Rule Files
      - Store in `.cursor/rules/` for cursor-specific rules
      - Store in `rules/` for general development standards
      - Follow consistent format with YAML frontmatter and `<rule>` tags
      - Include examples for common use cases

      ### 4.2 Reference Materials
      - Store in `Reference/` directory
      - Keep API documentation and examples current
      - Document SillyTavern integration points

      ### 4.3 User Documentation
      - Maintain README.md with installation and usage instructions
      - Update when adding new features
      - Include examples for common use cases

      ## 5. Cross-Referencing

      ### 5.1 Internal References
      - Link between CURSOR_CONTEXT.md and DEVELOPMENT_LOG.md
      - Reference rule files when discussing standards
      - Maintain consistency between documentation and code

      ### 5.2 External References
      - Link to SillyTavern documentation when relevant
      - Reference external libraries and dependencies
      - Document API integration points

      ## 6. Version Control

      ### 6.1 Commit Patterns
      - Follow conventional commits:
        - `feat(dice): add support for fudge dice`
        - `fix(ui): correct dice animation timing`
        - `docs: update usage instructions`
      - Include detailed commit messages
      - Reference related issues or tasks

      ### 6.2 Documentation Updates
      - Update documentation when implementing features
      - Keep README.md current with latest functionality
      - Ensure rule files reflect current standards

      Remember:
      - Update DEVELOPMENT_LOG.md before and after significant changes
      - Keep CURSOR_CONTEXT.md current with project status
      - Maintain consistent formatting in all documentation
      - Use progress markers for clarity
      - Follow established patterns for all updates

examples:
  - input: |
      "How do I add a new entry to the development log?"
    output: |
      To add a new entry to the development log:

      1. Open DEVELOPMENT_LOG.md in the log/ directory
      2. Add a new section at the bottom with the current timestamp:
      
      ```markdown
      ## 2024-06-13 11:30

      ### Current Status
      - Implemented new feature X
      - Fixed bug in function Y
      - Updated documentation for Z

      ### Commands Run
      - None (code editing only)

      ### Errors Encountered
      - None

      ### Next Steps Planned
      1. Test feature X with different inputs
      2. Implement feature W
      3. Update README.md with new functionality
      4. Review code for performance improvements
      ```

      3. Save the file
      4. Consider updating CURSOR_CONTEXT.md if the project status has changed significantly

  - input: |
      "How should I update the cursor context after implementing a new feature?"
    output: |
      To update the cursor context after implementing a new feature:

      1. Open log/CURSOR_CONTEXT.md
      2. Update the "What's Working" section to include your new feature
      3. Move the feature from "What's Being Implemented" to "What's Working" if applicable
      4. Add to the "Recent Updates" section with details about your implementation
      5. Update the "Implementation Progress" section:
         - Move the task from "In Progress" to "Completed"
         - Add any new tasks that resulted from this implementation

      Example update:
      ```markdown
      ### What's Working
      - Basic extension structure is in place
      - Manifest.json defines extension parameters
      - README.md provides basic usage instructions
      - index.js contains core functionality
      - Function calling API integration is implemented
      - Message sending system with support for system, user, and character messages
      - Documentation for dice notation syntax is now properly structured
      - New feature X is now implemented and working properly

      ## Recent Updates
      - Implemented feature X with support for Y and Z
      - Fixed bug in function A that was causing issue B
      - Updated documentation to reflect new functionality
      - Added examples for using feature X
      ```

  - input: |
      "What's the proper way to organize documentation in this project?"
    output: |
      The proper way to organize documentation in this project:

      1. User-facing documentation:
         - README.md in the project root
         - Clear installation instructions
         - Usage examples with code snippets
         - Feature documentation

      2. Development standards and guidelines:
         - Store in .cursor/rules/ for cursor-specific rules
         - Store in rules/ for general development standards
         - Follow the structured format with:
           - YAML frontmatter
           - <rule> tags
           - Consistent sections
           - Practical examples

      3. Working memory:
         - CURSOR_CONTEXT.md for current project state
         - DEVELOPMENT_LOG.md for progress tracking
         - Regular updates to both files

      4. Reference materials:
         - Store in Reference/ directory
         - Include API documentation
         - SillyTavern integration examples
         - External library references

      All documentation should follow consistent formatting, use appropriate markdown, and be kept up-to-date with the latest code changes. When adding new features, update both the code and documentation simultaneously.

metadata:
  priority: high
  version: 1.0
  tags:
    - memory-management
    - documentation
    - development-process
    - d&d-dice-extension
    - sillytavern-extension
</rule>
