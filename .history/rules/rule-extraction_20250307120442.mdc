---
description: Rule for extracting and managing rules from .cursorrules files for the D&D Dice Extension
globs: ["**/.cursor/rules/**/*.cursorrules"]
---
# Rule Extraction and Management
# This rule helps identify and manage rules from .cursorrules files for SillyTavern extensions

<rule>
name: rule_extraction
description: Extracts and manages rules from .cursorrules files for the D&D Dice Extension
filters:
  - type: file_extension
    pattern: "\\.cursorrules$"
  - type: content
    pattern: "(?i)(rules|guidelines|standards|conventions)"
actions:
  - type: suggest
    message: |
      # D&D Dice Extension Rules Extracted from .cursorrules

      ## 1. Project Structure Rules
      - **File Organization**:
        - Main extension code in `index.js`
        - Styling in `style.css`
        - Extension configuration in `manifest.json`
        - Documentation in `README.md`
        - Reference materials in `/Reference/`
        - Optional modular code in `/modules/`
      
      - **Modular Structure**:
        - Dice rolling logic in `dice.js`
        - UI components in `ui.js`
        - Utility functions in `utils.js`

      ## 2. Code Standards
      - **Naming Conventions**:
        - camelCase for variables and functions (e.g., `doDiceRoll`)
        - PascalCase for classes (e.g., `SlashCommand`)
        - UPPER_SNAKE_CASE for constants (e.g., `MODULE_NAME`)
        - Prefix private methods with underscore (`_methodName`)
      
      - **Formatting Rules**:
        - 2-space indentation
        - 80-character line length limit
        - Semicolons required
        - Single quotes for strings
        - JSDoc style comments for functions

      ## 3. Documentation Standards
      - **Working Memory**:
        - Track current state in `log/CURSOR_CONTEXT.md`
        - Track development progress in `log/DEVELOPMENT_LOG.md`
        - Update both files when making significant changes
      
      - **Rule Files**:
        - Store in `.cursor/rules/` for cursor-specific rules
        - Store in `rules/` for general development standards
        - Follow consistent format with YAML frontmatter and `<rule>` tags
        - Include examples for common use cases

      ## 4. SillyTavern Integration
      - **Event System**:
        - Use SillyTavern's event system for proper integration
        - Register for events like `CHAT_CHANGED`
        - Follow the patterns in SillyTavern.getContext.json
      
      - **Function Calling API**:
        - Register function tools for AI integration
        - Provide clear descriptions and parameters
        - Implement proper handlers for dice rolling
      
      - **UI Integration**:
        - Follow SillyTavern's UI component patterns
        - Use appropriate CSS classes and HTML structure
        - Ensure compatibility with SillyTavern's themes

      ## 5. Dice Notation Standards
      - **Basic Notation**:
        - Standard format: `NdS` (N dice with S sides)
        - Support common dice types (d4, d6, d8, d10, d12, d20, d100)
        - Handle modifiers (e.g., `2d6+3`)
      
      - **Advanced Features**:
        - Support multiple dice groups (e.g., `2d6+1d8`)
        - Implement proper validation and error handling
        - Provide clear feedback for invalid notation

      ## 6. UI/UX Guidelines
      - **Theme Compatibility**:
        - Support all avatar styles (Circle, Square, Rectangle)
        - Adapt to different chat styles (Flat, Bubbles, Document)
        - Respect user's color scheme for consistent appearance
        - Support both light and dark themes
      
      - **Accessibility**:
        - Support Reduced Motion setting
        - Ensure functionality works without blur effects
        - Provide clear visual feedback for dice rolls
        - Maintain readability with or without text shadows
      
      - **Mobile Responsiveness**:
        - Support swipe gestures for dice selection
        - Adapt to compact input area on mobile
        - Ensure touch targets are appropriately sized
        - Test with various mobile screen sizes

      ## 7. Development Workflow
      - **Testing Requirements**:
        - Manual testing of dice rolls for fairness
        - UI testing across different SillyTavern themes
        - Function calling integration tests
        - Mobile compatibility testing
      
      - **Error Handling**:
        - Graceful fallbacks for invalid dice notation
        - Clear error messages for users
        - Logging for debugging purposes
        - Recovery from extension conflicts
      
      - **Performance Optimization**:
        - Efficient dice rolling algorithms
        - Optimized animations
        - Lazy loading of resources
        - Minimal DOM manipulation

      Remember to:
      - Check these rules before starting development
      - Update rules as patterns emerge
      - Document exceptions
      - Conduct regular rule reviews
      - Keep documentation in sync with code

examples:
  - input: |
      "How do I extract rules from the dice-syntax.cursorrules file?"
    output: |
      To extract rules from the dice-syntax.cursorrules file:

      1. First, locate the file in the .cursor/rules/ directory
      2. Look for structured sections, typically marked with ## headings
      3. Extract the key guidelines and standards for dice notation

      The main rules extracted from dice-syntax.cursorrules are:

      - **Basic Dice Notation**:
        - Standard format: `NdS` where N is number of dice and S is sides
        - N is optional and defaults to 1 if omitted
        - Support for common dice types: d4, d6, d8, d10, d12, d20, d100

      - **Advanced Notation**:
        - Support for modifiers: `NdS+M` or `NdS-M`
        - Support for multiple dice groups: `NdS+MdT`
        - Support for combined operations: `NdS+MdT+X`

      - **Usage Examples**:
        - `2d6+3`: Roll two 6-sided dice and add 3
        - `1d20+5`: Roll one 20-sided die and add 5
        - `3d6+2d4`: Roll three 6-sided dice and two 4-sided dice

      - **Integration**:
        - Slash commands: `/roll 2d6`, `/r 1d20+5`
        - Function calling API integration
        - Error handling for invalid formulas

      These rules should be applied when implementing dice rolling functionality in the extension.

  - input: |
      "What are the UI/UX guidelines for the D&D Dice extension?"
    output: |
      The UI/UX guidelines for the D&D Dice extension, extracted from the .cursorrules files, include:

      1. **Theme Compatibility**:
         - Support all avatar styles (Circle, Square, Rectangle)
         - Adapt to different chat styles (Flat, Bubbles, Document)
         - Respect user's color scheme for consistent appearance
         - Support both light and dark themes

      2. **Accessibility Features**:
         - Support Reduced Motion setting for users who prefer minimal animations
         - Ensure functionality works without blur effects when disabled
         - Provide clear visual feedback for dice rolls regardless of theme
         - Maintain readability with or without text shadows

      3. **Mobile Responsiveness**:
         - Support swipe gestures for dice selection on mobile
         - Adapt to compact input area on mobile devices
         - Ensure touch targets are appropriately sized (minimum 44px)
         - Test with various mobile screen sizes

      4. **Message Integration**:
         - Follow SillyTavern's message formatting standards
         - Support proper display of character and user names
         - Ensure compatibility with message actions panel
         - Support translation of dice roll results if translation feature is enabled

      5. **UI Components**:
         - Use SillyTavern's component patterns for buttons and dropdowns
         - Follow the flexbox patterns used throughout the application
         - Use consistent spacing and alignment
         - Ensure styles don't leak outside the extension's scope

      6. **CSS Guidelines**:
         - Use SillyTavern's CSS variables for colors and dimensions
         - Example: `var(--SmartThemeBodyColor)`, `var(--SmartThemeBlurTintColor)`
         - Use `var(--avatar-roundness)` for consistent border radius
         - Use `var(--font)` for consistent typography

      These guidelines ensure the extension looks and feels like a native part of SillyTavern regardless of the user's theme or device preferences.

  - input: |
      "How should I apply these extracted rules to my development process?"
    output: |
      To apply the extracted rules to your development process for the D&D Dice extension:

      1. **Initial Setup**:
         - Structure your project according to the file organization guidelines
         - Create the core files: index.js, style.css, manifest.json, README.md
         - Set up the optional modules directory if needed

      2. **Development Workflow**:
         - Follow the code standards for naming conventions and formatting
         - Document your code with JSDoc comments
         - Implement proper error handling and validation
         - Test across different themes and devices

      3. **SillyTavern Integration**:
         - Use the event system to hook into SillyTavern's functionality
         - Implement function calling API for AI integration
         - Follow UI integration patterns for consistent look and feel

      4. **Documentation**:
         - Keep CURSOR_CONTEXT.md updated with current status
         - Add entries to DEVELOPMENT_LOG.md for significant changes
         - Use progress markers (‚úì, ü§î, ‚ùå, ‚è≠Ô∏è, üìö) for clarity
         - Maintain README.md with installation and usage instructions

      5. **Testing**:
         - Test dice rolling functionality for fairness and accuracy
         - Verify UI appearance across different themes
         - Test on mobile devices for responsiveness
         - Validate function calling integration

      6. **Continuous Improvement**:
         - Review and update rules as patterns emerge
         - Document exceptions and special cases
         - Conduct regular code reviews
         - Keep documentation in sync with code

      By following these guidelines, you'll ensure your extension is well-structured, maintainable, and provides a consistent user experience that integrates seamlessly with SillyTavern.

metadata:
  priority: high
  version: 1.0
  tags:
    - rule-extraction
    - documentation
    - development-process
    - d&d-dice-extension
    - sillytavern-extension
</rule>
